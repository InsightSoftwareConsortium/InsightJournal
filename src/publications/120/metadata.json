{
 "publication": {
  "abstract": "This documents describes a set of classes to integrate digital topology in the\r\nInsight Toolkit, with an application to homotopic thinning. The skeletonization\r\nfilter implemented using our set of classes is twice as fast as BinaryThinningImageFilter\r\nand can be used on images of any dimension.",
  "authors": [
   {
    "author_fullname": "Lamy, Julien",
    "author_place": 1,
    "persona_email": "lamy@unistra.fr",
    "persona_firstname": "Julien",
    "persona_id": 476,
    "persona_lastname": "Lamy"
   }
  ],
  "categories": [
   "Data Representation",
   "Programming"
  ],
  "comments": [],
  "date_submitted": "2006-08-23T21:40:15Z",
  "handles": [
   {
    "handle": "1926/304",
    "handle_url": "http://hdl.handle.net/1926/304"
   }
  ],
  "identifiers": {
   "doi": null,
   "pubmed": null
  },
  "journals": [
   {
    "journal_id": 3,
    "journal_name": "The Insight Journal"
   }
  ],
  "publication_id": 120,
  "reviews": [
   {
    "author": {
     "author_email": "gaetan.lehmann@gmail.com",
     "author_firstname": "Gaetan",
     "author_id": 328,
     "author_lastname": "Lehmann"
    },
    "content": "<p><strong>Summary:</strong> This article present a set of new ITK classes designed to integrate digital topology in the toolkit, and a thinning filter implemented with those classes. </p><p><strong>Open Science:</strong> Source code is provided, as well as test data </p><p><strong>Reproducibility:</strong> I reproduced the author work, but with some problem (as reported by the automatic testing system). The author should use a contribution template to avoid those problems </p><p><strong>Use of Open Source Software:</strong> The new classes are fully integrated to the toolkit </p><p><strong>Open Source Contributions:</strong> Eveything is there and already easy to use </p><p><strong>Code Quality:</strong> Code quality is very good and easy to read. However, it does not always follow the ITK coding style (naming and indentation) </p><p><strong>Applicability to other problems:</strong> This contribution provides classes applicable to many problems: directly with the thinning algorithm, and in all transforms which are manipulating the connectivity notion (that&#39;s the case of several of my already publish contributions, and some of my contributions in preparation), and obviously the topology notions </p><p><strong>Suggestions for future work:</strong> </p><ul><li> release the pre condition of the thining. An object should touch the border. I would set a border value to fix that, with a SetBorderInside(bool) for example, or always considere the outside of the image is inside or outside the object. </li><li> let the user specify the connectivity at run time. I can&#39;t see in your code any efficiency reason to keep that as template parameter. </li><li> There are already some filters in ITK which are manipulating connectivity - the reconstruction filters for example, or the connected component one. The connectivity option is limited to the smallest one (6 in 3D) and the largest on (26 in 3D) without the possibility to use an intermediate value. It would by nice to extend their capabilities with your connectivity framework, and so provide FullConnectivity(bool) adapter in the connectivity class. </li><li> let the user choose the ordering image type </li><li> it should be possible to get a Neighborhood from the Connectivity object. That way, an iterator can be used to access the neighbors, instead of offsets </li></ul> I have already done the items below. The modified code is available at&nbsp;http://voxel.jouy.inra.fr/darcsweb/darcsweb.cgi?r=ITKSkeleton;a=summary <ul><li>ordering input should be managed by the itk pipeline, not as an ivar, so the filter can be fully used in a pipeline </li><li>the filter must require the entire input region to produce correct output. Without that, if a small region is requested, the output will not be the same than the same region of the image if the filter have produce all the image </li><li>the filter should provide a progress reporter </li><li>the hierarchical queue does not follow the itk coding style. I have also worked on such a class some weeks ago - it must be a real need in ITK </li><li>the filter should let the user define the value of the pixels which are int the object, instead of considering that 0 pixels are outside </li><li> the header should include the txx file only if ITK_MANUAL_INSTANTIATION is not defined </li><li> copy constructor and operator= should be declared but not implemented, in order to be wrappable </li><li> use a clean code structure to build properly on automatic testing system, and on reviewers systems </li><li> improve queue performance by using a list instead of of a deque (36 s instead of 382 s with you rabbit image on my computer) (nice rabbit by the way) </li><li> provide tests with cmake, so the reproducibility can be easily validated. Tests are also very useful as non rregession tests, hwen implementing new features (the changes above are validated that way) </li></ul><strong>Additional Comments:</strong> The above chapter looks may make the contribution looks like no so good work - that&#39;s really not the case. It&#39;s only easier to say what&#39;s wrong than what is good :-) I thought to implement the a thinning filter based on the same article a few month ago, but give up by lack of time. You&#39;ve done it better than what I should have done, so everything is fine :-)",
    "date": "11-06-2006",
    "review_id": 317
   },
   {
    "author": {
     "author_email": "r.b.schilling@gmail.com",
     "author_firstname": "Ruben",
     "author_id": 620,
     "author_lastname": "Schilling"
    },
    "content": "<strong>Summary:</strong><br /><div>The authors addressed the lack of a 3D skeletonization filter in ITK. They implemented a homotopic thinning algorithm based on chamfer distance ordered topologically correct pixel removal.</div><div><br /> <strong>Hypothesis:</strong><br />The authors assume the image to be binary and not connected to the image&#39;s border. Their goal is a 1D line of good medial position reflecting the topology of the image.</div><div><br /> <strong>Evidence:</strong><br /></div><div>The authors support their claims by a test input image and the expected resulting image of their algorithm.</div><div><br /> <strong>Open Science:</strong><br />The authors provide enough data, code and information to conduct the experiment.</div><div><br /></div><div> <strong>Reproducibility:</strong></div><div>I reproduced the authors work by downloading, compiling and running their code on the provided image. The image was indeed as reported by the authors.<br /><br /></div><div> <strong>Open Source Contributions:</strong><br />The authors provide their source code. Except for a missing file (IJMacros.txt) everything was in place. After obtaining the missing file from a different place on the internet compilation was fine.<br /> </div><div><br /></div><div><strong>Code Quality:</strong><br />The code runs fine on my Mac OS X box and was nicely readable and structured.</div><div><br /> <strong>Applicability to other problems:</strong><br /></div><div>I didn&#39;t get the authors code to work on any other image except the one provided. Changing file format of the provided file from .hdr/.img to .tif stopped the algorithm from producing output. Adding a second object to the image (just another foreground blob, not connected to the bunny and flat circular 10 pixels radius, not touching the border) stopped also the algorithm from producing output. Using my own binary data (not touching border of the image) let the algorithm crash with a segmentation fault, even for very small image sizes, where memory isn&#39;t an issue. Converting the provided test images to tif and back to hdr resulted in silghtly different output.</div><div><br /> <strong>Suggestions for future work:</strong><br /></div><div>I would suggest, that the code should be made more reliable regarding the described issues.</div><div><br /> <strong>Requests for additional information from authors:</strong><br /></div><div>I found, that the paper was missing enough information about tuning parameters of the algorithm and an instructive description of the algorithm&#39;s parameters. It would be helpful to add those to the paper and/or code comments.</div><div><br /> <strong>Additional Comments:</strong><br /><br /></div>",
    "date": "06-24-2007",
    "review_id": 494
   },
   {
    "author": {
     "author_email": "martin_styner@ieee.org",
     "author_firstname": "Martin",
     "author_id": 28,
     "author_lastname": "Styner"
    },
    "content": "<b>Summary:</b>\r\n\r\nThe paper presents the implementation of efficient connectivity framework based on ITK. By including all the recommendations suggested in Gaetan Lehmann\u00e2\u0080\u0099s earlier review, this makes a formidable example for an inclusion into ITK.\r\n\r\n<b>Open Science:</b>\r\nThe full source code, a testing program as well as the test data is provided.\r\n\r\n<b>Reproducibility:</b>\r\nI have not compiled or reproduced the results.\r\n\r\n<b>Use of Open Source Software:</b>\r\nThe work is based on ITK and represents an extension of it.\r\n\r\n<b>Open Source Contributions:</b>\r\nThe author provide a flexible and efficient basic framework for connectivity operators as open source.\r\n\r\n<b>Code Quality:</b>\r\nThe code looks good, well structured and documented.\r\n\r\n<b>Applicability to other problems:</b>\r\nThe framework seems easily adapted and applicable to other connectivity problems. \r\n",
    "date": "09-21-2006",
    "review_id": 393
   },
   {
    "author": {
     "author_email": "bipul.das@ge.com",
     "author_firstname": "Bipul",
     "author_id": 500,
     "author_lastname": "Das"
    },
    "content": "I tried to build it using MSVC 6.0, ITK 2.2 and Cmake 2.2. I have a few questions:\r\n\r\nInitially in the CMake file it tries to include file IJMacros.txt - which could not be found. What should this file be...\r\n\r\nI made some changes to run the cmake part. While trying to build the following errors were found and warnings were found:\r\n\r\n<b> Errors </b>\r\n\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkPoint.h(43) : error C2503: \\\\\\'FixedArray<double,0>\\\\\\' : base classes cannot contain zero-sized arrays</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(141) : see reference to class template instantiation \\\\\\'itk::Point<double,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Utilities\\\\\\\\vxl\\\\\\\\core\\\\\\\\vnl/vnl_matrix_fixed.h(114) : error C2087: \\\\\\'<Unknown>\\\\\\' : missing subscript</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkMatrix.h(164) : see reference to class template instantiation \\\\\\'vnl_matrix_fixed<double,0,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(148) : see reference to class template instantiation \\\\\\'itk::Matrix<double,0,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Utilities\\\\\\\\vxl\\\\\\\\core\\\\\\\\vnl/vnl_matrix_fixed.h(114) : warning C4200: nonstandard extension used : zero-sized array in struct/union</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkMatrix.h(164) : see reference to class template instantiation \\\\\\'vnl_matrix_fixed<double,0,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(148) : see reference to class template instantiation \\\\\\'itk::Matrix<double,0,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkVector.h(59) : error C2503: \\\\\\'FixedArray<double,0>\\\\\\' : base classes cannot contain zero-sized arrays</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(159) : see reference to class template instantiation \\\\\\'itk::Vector<double,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(393) : error C2229: class \\\\\\'itk::ImageBase<0>\\\\\\' has an illegal zero-sized array</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageRegion.h(264) : error C2229: class \\\\\\'itk::ImageRegion<0>\\\\\\' has an illegal zero-sized array</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(395) : see reference to class template instantiation \\\\\\'itk::ImageRegion<0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(396) : error C2229: class \\\\\\'itk::ImageBase<0>\\\\\\' has an illegal zero-sized array</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(397) : error C2229: class \\\\\\'itk::ImageBase<0>\\\\\\' has an illegal zero-sized array</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : error C2503: \\\\\\'ImageBase<0>\\\\\\' : base classes cannot contain zero-sized arrays</b>\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\BackgroundConnectivity.h(16) : error C2143: syntax error : missing \\\\\\',\\\\\\' before \\\\\\'-\\\\\\'</b>\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\BackgroundConnectivity.h(17) : see reference to class template instantiation \\\\\\'itk::BackgroundConnectivity<TConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\BackgroundConnectivity.h(16) : error C2977: \\\\\\'Connectivity\\\\\\' : too many template arguments</b>\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\Connectivity.h(110) : see declaration of \\\\\\'Connectivity\\\\\\'\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\BackgroundConnectivity.h(17) : see reference to class template instantiation \\\\\\'itk::BackgroundConnectivity<TConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\UnitCubeCCCounter.txx(28) : error C2059: syntax error : \\\\\\'\\\\\\'template<\\\\\\'\\\\\\'</b>\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\UnitCubeCCCounter.txx(40) : error C2143: syntax error : missing \\\\\\';\\\\\\' before \\\\\\'{\\\\\\'</b>\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\UnitCubeCCCounter.txx(40) : error C2447: missing function header (old-style formal list?)</b>\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\UnitCubeCCCounter.txx(85) : error C2954: template definitions cannot nest</b>\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\UnitCubeCCCounter.txx(86) : error C2059: syntax error : \\\\\\'\\\\\\'template<\\\\\\'\\\\\\'</b>\r\n<b>C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\UnitCubeCCCounter.txx(108) : fatal error C1903: unable to recover from previous error(s);</b> stopping compilation\r\nError executing cl.exe.stopping compilation\r\nError executing cl.exe.\r\n\r\n\r\n<b> Warnings </b>\r\n\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkOffset.h(183) : warning C4200: nonstandard extension used : zero-sized array in struct/union</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkIndex.h(83) : see reference to class template instantiation \\\\\\'itk::Offset<0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(102) : see reference to class template instantiation \\\\\\'itk::Index<0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkIndex.h(260) : warning C4200: nonstandard extension used : zero-sized array in struct/union</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(102) : see reference to class template instantiation \\\\\\'itk::Index<0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkSize.h(189) : warning C4200: nonstandard extension used : zero-sized array in struct/union</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(111) : see reference to class template instantiation \\\\\\'itk::Size<0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n<b>C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkFixedArray.h(211) : warning C4200: nonstandard extension used : zero-sized array in struct/union</b>\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkPoint.h(43) : see reference to class template instantiation \\\\\\'itk::FixedArray<double,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImageBase.h(141) : see reference to class template instantiation \\\\\\'itk::Point<double,0>\\\\\\' being compiled\r\n C:\\\\\\\\itksoftware\\\\\\\\InsightToolkit-2.4.0\\\\\\\\Code\\\\\\\\Common\\\\\\\\itkImage.h(84) : see reference to class template instantiation \\\\\\'itk::ImageBase<0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(109) : see reference to class template instantiation \\\\\\'itk::Image<unsigned int,0>\\\\\\' being compiled\r\n C:\\\\\\\\Bipul\\\\\\\\DigitalTopology\\\\\\\\ITKSkeleton\\\\\\\\itkSkeletonizeImageFilter.h(114) : see reference to class template instantiation \\\\\\'itk::SkeletonizeImageFilter<TImage,TForegroundConnectivity>\\\\\\' being compiled\r\n",
    "date": "09-27-2006",
    "review_id": 406
   },
   {
    "author": {
     "author_email": "dan.muel@gmail.com",
     "author_firstname": "Dan",
     "author_id": 286,
     "author_lastname": "Mueller"
    },
    "content": "<p><strong>Summary:</strong><br /> This paper presents an ITK filter for skeletonization using homotopic thinning.<br /> <br /> <strong>Hypothesis:</strong><br />The author claims the presented filter is faster than the existing ITK method, and works for both 2-D and 3-D images.<br /> <br /> <strong>Evidence:</strong><br />A table of results in given on page 3 of the paper supporting the claim. <br /> </p><p><strong>Open Science:</strong><br />The source code, input data, and baseline result is supplied with the article. <br /> <br /> <strong>Reproducibility:</strong><br />I downloaded, compiled, and ran the work (there were some compilation issues, see below). I have also used the filter in other applications on a variety of 2-D and 3-D images.<br /><br /> <strong>Use of Open Source Software:</strong><br />Extends ITK.<br /> <br /> <strong>Open Source Contributions:</strong><br />The full source code is provided, as well as a test executable. I would suggest using the CMake ADD_TEST functionality and ImageCompare for validating the output matches the baseline image.</p><p> <strong>Code Quality:</strong><br />Most of the code is good. However I did encounter some issues compiling the code using Microsoft Visual Studio 8.0.50727.762:</p><ul><li>itkChamferDistanceTransformImageFilter.txx(180) : Error C2780: &#39;const _Ty &amp;std::min(const _Ty &amp;,const _Ty &amp;,_Pr)&#39; : expects 3 arguments - 2 provided<br /></li><li>itkUnitCubeCCCounter.txx(34) : Warning C4996: &#39;std::copy&#39;: Function call with parameters that may be unsafe - this call relies on the caller to check that the passed values are correct. To disable this warning, use -D_SCL_SECURE_NO_WARNINGS. See documentation on how to use Visual C++ &#39;Checked Iterators&#39; </li></ul><p>I fixed the errors by specifying the template argument for std::min: minimum = std::min(minimum, it.GetPixel(i) + mask[i]);</p><p>There are a number of style considerations I would also suggest:</p><ul><li>Is there a good reason for the itkSkeletonizeImageFilter to be an InPlaceImageFilter? I have found that this causes issues when writing the output of the skeletonize filter to disk: the output must be disconnected before being plugged into a writer object. I think making the filter an ImageToImageFilter would fix this.<br /></li><li>I agree with Ga&euml;tan&#39;s comment regarding the ForegroundConnectivity template: it should be removed (to help with wrapping).</li><li>I agree with Ga&euml;tan&#39;s comment regarding automated border padding: at the moment if the input image (accidentally) touches the edges a segfault is caused (perhaps this is the problem that Ruben described in this review?).</li><li>I like Ivan&#39;s idea to add a template for the itkSkeletonizeImageFilter ordering image: except I would make the default the input image type for sake of ease.</li><li>The txx file include in itkSkeletonizeImageFilter.h should be wrapped with the normal ITK_MANUAL_INSTANTIATION.</li><li>The commenting in the header files does not seem to conform to the standard ITK style.</li><li>The mechanism for setting the weights in itkChamferDistanceTransformImageFilter is not the typical ITK style (in fact it took me quite some time to work out how to set the values). To bring it more in line with the ITK standard, I suggest using a FixedArray typedef similar to that used by the BilateralImageFilter to specify the DomainSigma parameters, or the itkCannyEdgeDetectionImageFilter Variance parameter, etc.</li></ul><p><br /> <strong>Applicability to other problems:</strong><br />The work is useful for a range of applications, including vessel centerline detection.<br /> <br /> <strong>Overall:</strong><br /> A useful filter, with some further work it will make a great addition to ITK. </p>",
    "date": "07-23-2007",
    "review_id": 513
   },
   {
    "author": {
     "author_email": "imacia@vicomtech.org",
     "author_firstname": "Ivan",
     "author_id": 164,
     "author_lastname": "Macia"
    },
    "content": "<p><strong>Summary:</strong><br />This paper describes an implementation in ITK of some concepts taken from digital topology. It implements a connectivity framework allowing to calculate the topological numbers of a point in a neighborhood and to discriminate simple points. The authors implement a useful algorithm for skeletonization using binary thinning based on these concepts. In my opinion it is a very useful contribution for the toolkit and one I was particularly interested in.<br /> <br /> <strong>Open Science:</strong><br />Source code as well as an example with data is provided that allows reproducibility.<br /> <br /> <strong>Reproducibility:</strong><br />I was able to compile and reproduce the mentioned results. Latest fixes solve most of the initial compilation problems.<br /> <br /> <strong>Use of Open Source Software:</strong><br />The implementation is based on ITK and is itself an extension of the libraries for some features that are not already implemented.<br /><br /> <strong>Open Source Contributions:</strong><br />The provided source code is readily usable as it is, maybe requiring some minor changes/fixes. Main contributions are a framework for connectivity and an implementation of a skeletonization image filter based on binary thinning. More work could be derived by extending/using these concepts.<br /> <br /> <strong>Code Quality:</strong><br />The implementation is good and well structured, separating the different concepts involved into components. <br />I miss some more documentation/comments in some parts on the code that makes it easier to read.<br />Sometimes it does not follow the ITK coding style.</p><p>Additionally I made some fixes/improvements in the code :<br />- The ordering image type should be a template parameter. I have already been in the need of using an image type different from itk::Image<br />- There where some variables/members/methods that were using char/int where they should use unsigned char/unsigned int, for example the neighborhood image buffer and neighborhood sizes.<br />- I had linking problems with the global method factorial() when integrating it into an application. Changed this to a static method. Also reimplemented Factorial() to avoid recursive function calls.<br /><br />My proposed changes are included as an attachment<br /> <br /> <strong>Applicability to other problems:</strong><br />More imaging algorithms based on concepts of digital topology could be implemented using this work. The skeletonization algorithm is very useful for vessel centerline extraction.<br /> <br /> <strong>Suggestions for future work:</strong><br />I miss some more introductory information in the paper. For example, the definition of simple points which is not obvious for non-experts.<br /> <br /> </p>",
    "date": "02-21-2007",
    "review_id": 456
   }
  ],
  "submitted_by_author": {
   "author_email": "lamy@unistra.fr",
   "author_firstname": "Julien",
   "author_id": 476,
   "author_institution": "Universit\u00e9 de Strasbourg",
   "author_lastname": "Lamy"
  },
  "tags": [
   "Digital topology"
  ],
  "title": "Digital Topology"
 }
}