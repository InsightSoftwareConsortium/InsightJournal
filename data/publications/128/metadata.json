{
  "publication": {
    "abstract": "ITK currently supports real to complex conjugate forward and inverse Fourier transformation's through dedicated filters. In turn, these utilize one of a number of Fourier transform implementations, such as that available through VNL, through FFTW or through Intel's implementation of the FFTW API.\r\nWhen dealing directly with complex data, such as may be acquired by an MRI scanner, it is convenient to have dedicated filters supporting Complex to Complex transformations. It is also convenient to have filter classes that can convert between complex data and real and imaginary component and magnitude and phase component representations.",
    "articles": [
      null
    ],
    "authors": [
      {
        "author_fullname": "Warfield, Simon",
        "author_place": 1,
        "persona_email": "simon.warfield@childrens.harvard.edu",
        "persona_firstname": "Simon",
        "persona_id": 514,
        "persona_lastname": "Warfield"
      }
    ],
    "categories": [],
    "comments": [],
    "date_submitted": "2006-10-22T20:29:07Z",
    "journals": [
      {
        "journal_id": 3,
        "journal_name": "The Insight Journal"
      }
    ],
    "license": "You are licensing your work to Kitware Inc. under the\nCreative Commons Attribution License Version 3.0.\n\nKitware Inc. agrees to the following:\n\nKitware is free\n * to copy, distribute, display, and perform the work\n * to make derivative works\n * to make commercial use of the work\n\nUnder the following conditions:\n\\\"by Attribution\\\" - Kitware must attribute the work in the manner specified by the author or licensor.\n\n * For any reuse or distribution, they must make clear to others the license terms of this work.\n * Any of these conditions can be waived if they get permission from the copyright holder.\n\nYour fair use and other rights are in no way affected by the above.\n\nThis is a human-readable summary of the Legal Code (the full license) available at\nhttp://creativecommons.org/licenses/by/3.0/legalcode",
    "publication_id": 128,
    "reviews": [
      {
        "author": {
          "author_email": "jordi.inglada@cnes.fr",
          "author_firstname": "Jordi",
          "author_id": 511,
          "author_lastname": "Inglada"
        },
        "content": "<p><strong>Summary:</strong><br />The problem addressed is the one of providing an easy access to complex valued images. Helper classes for conversion between cartesian and polar complex representations are given.<br /> <br /> <strong>Hypothesis:</strong><br />Non Applicable</p><p><br /> <strong>Evidence:</strong><br />Non Applicable<br /> <br /> <strong>Open Science:</strong><br />Source code is given.</p><p> <strong>Reproducibility:</strong><br />I was able to successfully compile and run the code.</p><p><strong>Use of Open Source Software:</strong><br />ITK is used.</p><p><br /> <strong>Open Source Contributions:</strong><br />Source code is available.</p><p><br /> <strong>Code Quality:</strong><br />Seems to follow the ITK guidelines.<br /> <br /> <strong>Applicability to other problems:</strong><br />Very interesting for other image processing fields where comples images are used (radar images in remote sensing, for instance).</p><p> <strong>Suggestions for future work:</strong><br />Helper classes for filter design in the Fourier domain would be useful. Time-frequency analysis for complex data (short-time Fourier transform, Wigner-Ville and other transforms from the Cohen&#39;s class could be easily implemented) as well as Doppler analysis functionnalities would be useful for complex valued images. </p><p>&nbsp;</p><p><br /> <strong>Requests for additional information from authors:</strong></p><p>A more detailed description of the source code would be appreciated. The paper text is only ine page long! </p><p> <strong>Additional Comments:</strong><br />None.<br /> <br /> </p>",
        "date": "11-14-2006",
        "review_id": 434
      },
      {
        "author": {
          "author_email": "vpage@univ-ag.fr",
          "author_firstname": "Page",
          "author_id": 410,
          "author_lastname": "Vincent"
        },
        "content": "<p><strong>Summary:</strong><br />It s not a paper. The author implements a Complex to Complex FFT algorithms and some associated filters for the Insight Library.</p><p>As I have not been able to make/cmake the code, I guess that this review is of poor help.</p><br /><p><br /> <strong>Open Science:</strong></p><p>Sure It is open science !</p><p>&nbsp;</p><p><strong>Reproducibility:</strong><br /> I was not able to compile ... I spend 4 hours to re-compile the whole ITK with respect to the procedure of the README file, and then discovered that It&#39;s been of no help...I tried many other compilations, but no results either. Maybe I missed something but I guess that I would have done a better work as a reviewer if :</p><p>- the install part (compilation) was more detailed.</p><p>- a test procedure would be welcome ?</p><p>- I guess it is possible to compile only the new parts (and test them). There might be a standard procedure for this ... </p><p>&nbsp;</p>",
        "date": "12-11-2006",
        "review_id": 443
      },
      {
        "author": {
          "author_email": "jakub.bican@matfyz.cz",
          "author_firstname": "Jakub",
          "author_id": 81,
          "author_lastname": "Bican"
        },
        "content": "<p><strong>Summary:</strong><br />While Real-Complex and Complex-Real FFT filters are already present in the ITK, the general Complex-Complex filter is missing. This contribution brings such class along with two classes to compose a complex image from real and imaginary or modulus and phase components.<br /> <br /><strong>Evidence:</strong><br />Complex-Complex FFT is useful transform and corresponding filters are missing in ITK<br /> <br /> <strong>Open Science:</strong><br />This submission includes source codes and very simple example code, but with no testing data. I did not compile or execute the example as it does not comply with IJ submission style and requires overwriting parts of my local ITK installation.</p><p><strong>Reproducibility:</strong><br />I suggest adjusting the submission configuration to the IJ Testing Environment and add some tests and test images.</p><p><strong>Use of Open Source Software:</strong><br />These filters should be an extension of ITK.<br /> <br /> <strong>Open Source Contributions:</strong><br />The source code is provided but i found some problems that has to be fixed before the code will be widely usable.<br /> <br /> <strong>Code Quality:</strong><br />Code looks good.</p><p><strong>Applicability to other problems:</strong><br />N/A</p><p><strong>Suggestions for future work and comments:</strong></p><p>FFTComplexToComplexImageFilter</p><ul><li>FFT Direction should be rather a class &quot;property&quot; than a template parameter</li><li>complex to complex FFT is ALWAYS &quot;FullMatrix&quot; - halving of size in first dimension is a property of real to complex (and inverse) FFTs (due to so called Hermitian Redundancy) - see for example FFTW documentation for more details.</li><li>I recommend implementing customized New() method to this base class to enable configuration-based instantiation (see &quot;factories for FFTW filters - update&quot; discussion in Insight-users mailing list)</li></ul><p>FFTWComplexToComplexImageFilter</p><ul><li>I believe, that the current implementation - the way it is handling USE_FFTWD and USE_FFTWF constants and input pixel types - is not very functionable. I think it will work if only one of these constants is defined - if both are (which is not a very rare case), it may fail during compilation. But may be i am wrong in this, as i did not compile the code and i still have some gaps in generic programming:). BUT i highly recommend completely refactoring this class to use (possibly extended) FFTWProxy class as e.g. FFTWRealToComplexConjugateClass does. </li></ul><p><br /><strong>Final sigh</strong>: the optimal way would be to have one FFT filter that will be able to perform all types of FFT transforms (real-complex, complex-real, complex-complex) depending on the input and output image types and Direction property (only in case of complex-complex, as the direction is fully determined by the input and output types in case of &quot;real&quot; FFTs) - so you can focus in this way when refactoring the classes :-) (but of course - having simple complex-complex filter as you are proposing is OK too!) </p><p>&nbsp;</p>",
        "date": "11-07-2006",
        "review_id": 428
      },
      {
        "author": {
          "author_email": "norman-k-williams@uiowa.edu",
          "author_firstname": "Kent",
          "author_id": 150,
          "author_lastname": "Williams"
        },
        "content": "<p><strong>Summary:</strong><br /> Proposes adding ComplexToComplex FFT operations to ITK</p><p><br /> <strong>Hypothesis:</strong><br /> Author hypothesizes that adding ComplexToComplex FFT filters to ITK would be a good thing.</p><p> <strong>Evidence:</strong><br />Source Code</p><p><br /> <strong>Open Science:</strong></p><p>Freely available source code... </p><p><strong>Reproducibility:</strong></p><p>I downloaded the code and read the paper, such as it was. It&#39;s more like an abstract for a paper than an actual paper. The code being proposed for inclusion in ITK is very specific and concise, but a brief description of the new classes introduced, and why they have the class signature they do would be useful. </p><p><strong>Use of Open Source Software:</strong></p><p>As far as I can tell, completely open. </p><p> <strong>Open Source Contributions:</strong><br />Source Code is included and is nominally useful and mostly correct.</p><p><strong>Code Quality:</strong><br />Suggestions: This code was derived by editing the existing FFT/FFTW real-to-complex and complex-to-real source code. That origional code has changed slightly since the author appropriated it to produce this new set of classes. In order to be compatible with the current FFTW it&#39;s necessary to make copies of the input data, since it gets scribbled on by the fftwX_plan function. Also, the current FFTW/FFT code in Code/Algorithms allocates buffers and preserves the plan memory, so you can instantiate a filter, and re-use it without re-generating the plan. This is a big performance win. </p><p><strong>Applicability to other problems:</strong><br />Generally applicable to FFT based image processing, in cases where Complex image data is the input. This includes use in a pipeline that requires more than one FFT/IFFT operation in an ITK Pipeline, as the intermediate image results can remain in complex numbers. </p><p> <strong>Suggestions for future work:</strong><br /> Revisit the real-to-complex and complex-to-real FFTW filters and incorporate the changes detailed above. Provide some &#39;real world&#39; examples, implementing at least one common use case for FFT in Image processing. </p><p> <strong>Requests for additional information from authors:</strong><br /></p><p><strong>Additional Comments:</strong><br />It&#39;s suggested that the source code provided be copied into the Insight source tree for building and testing. For the purposes of a journal submission, a standalone project that can be built using an already-installed ITK would be a better choice. If the code passes review it can be copied into the Insight source tree one time. </p>",
        "date": "11-17-2006",
        "review_id": 437
      }
    ],
    "revisions": [
      {
        "article": null,
        "dapp": null,
        "dataset": null,
        "doi": null,
        "handle": "1926/326",
        "source_code": "bafybeigdb5rlh6gfy3t35vgjehdwjsvupl2uix5ctdczj7l4umk2icz5ui",
        "source_code_git_ref": null
      }
    ],
    "source_code_git_repo": null,
    "submitted_by_author": {
      "author_email": "simon.warfield@childrens.harvard.edu",
      "author_firstname": "Simon",
      "author_fullname": "Warfield, Simon",
      "author_id": 514,
      "author_institution": "Harvard Medical School",
      "author_lastname": "Warfield"
    },
    "tags": [
      "FFT",
      "ITK"
    ],
    "title": "FFT Complex to Complex filters and helper classes"
  }
}