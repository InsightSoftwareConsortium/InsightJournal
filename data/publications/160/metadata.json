{
  "publication": {
    "abstract": "Kernel based filtering is one of the fundamental tools of image\r\nanalysis and processing. A number of approaches have been developed\r\nover the years that allow efficient implementation of such filters\r\neven when the kernel size is large. This article reviews some of these\r\nmethods and introduces their ITK implementations.",
    "authors": [
      {
        "author_fullname": "Lehmann, Gaetan",
        "author_place": 2,
        "persona_email": "gaetan.lehmann@gmail.com",
        "persona_firstname": "Gaetan",
        "persona_id": 328,
        "persona_lastname": "Lehmann"
      },
      {
        "author_fullname": "Beare, Richard",
        "author_place": 1,
        "persona_email": "richard.beare@ieee.org",
        "persona_firstname": "Richard",
        "persona_id": 197,
        "persona_lastname": "Beare"
      }
    ],
    "categories": [
      "Blurring filters",
      "Code speed optimization",
      "Filtering",
      "Mathematical Morphology"
    ],
    "comments": [],
    "date_submitted": "2007-07-06",
    "journals": [
      {
        "journal_id": 3,
        "journal_name": "The Insight Journal"
      }
    ],
    "license": "You are licensing your work to Kitware Inc. under the\nCreative Commons Attribution License Version 3.0.\n\nKitware Inc. agrees to the following:\n\nKitware is free\n * to copy, distribute, display, and perform the work\n * to make derivative works\n * to make commercial use of the work\n\nUnder the following conditions:\n\\\"by Attribution\\\" - Kitware must attribute the work in the manner specified by the author or licensor.\n\n * For any reuse or distribution, they must make clear to others the license terms of this work.\n * Any of these conditions can be waived if they get permission from the copyright holder.\n\nYour fair use and other rights are in no way affected by the above.\n\nThis is a human-readable summary of the Legal Code (the full license) available at\nhttp://creativecommons.org/licenses/by/3.0/legalcode",
    "publication_id": 160,
    "reviews": [
      {
        "author": {
          "author_email": "dan.muel@gmail.com",
          "author_firstname": "Dan",
          "author_id": 286,
          "author_lastname": "Mueller"
        },
        "content": "<p><strong>Summary:</strong><br />This paper presents a set of ITK classes for efficient kernel-based filters. The authors provide source-code and results for various mechanisms including: separable filters, histogram-based kernels, and decomposition of morphological structuring elements. The results indicate the newly-implemented methods are faster than the basic approaches currently implemented in ITK (with some constraints, as discussed in the paper).<br /> <br /> <strong>Hypothesis:</strong><br />The efficient implementations are faster (with some constraints) than the existing ITK implementations.<br /> <br /> <strong>Evidence:</strong><br />Section 7 of the paper displays graphs of different algorithm performance and the Appendix lists the results in tabular format. The code used to generate the graphs and text file output is provided with the article.<br /> <br /> <strong>Open Science:</strong><br />The authors provide the input images, source code, and results used in their experiments.<br /> <br /> <strong>Reproducibility:</strong><br />I have downloaded, compiled, and run parts of the work. I did not run the performance analysis code, but I have used some of the filters in my own application (mostly the morphological filters) and anecdotal evidence suggest the speed-ups are valid.<br /><br />I did have some trouble compiling the code: the compiler I used (Microsoft Visual Studio 8.0.50727.762) complained about an ambiguous call to overloaded function &#39;pow&#39; in itkFlatStructuringElement. This was fixed by casting the base to double, eg.<br /><br /> unsigned int facets = 8 * (int)pow((double)4, iterations);<br /> <br /> <strong>Use of Open Source Software:</strong><br />The work extends ITK.<br /> <br /> <strong>Open Source Contributions:</strong><br />The full source-code is provided.<br /> <br /> <strong>Code Quality:</strong><br />The code quality is good and matches ITK standards. However, some of the documentation needs further work:</p><ul><li>The \\\\\\\\brief for itkSeparableImageFilter could be improved, eg. &quot;A filter for performing kernel operations using decomposition&quot; instead of &quot;A separable filter for filter which are using kernel&quot;, similar for itkSeparableRadiusImageFilter</li><li>itkAnchorCloseImageFilter and itkAnchorOpenImageFilter classes have no documentation</li><li>The documentation for the static constructors in itkFlatStructuringElement need work before integration into the toolkit, these methods are important and should be well documented for users</li><li>The documentation in itkMovingHistogramDilateImageFilter and itkMovingHistogramErodeImageFilter erronously refers to MorphologicalGradient <br /></li></ul><p>On the plus side, the documentation for itkMovingHistogramImageFilter (and others) is excellent!</p><p>I dislike the static const int declarations of the algorithm type, mainly because it is declared 4 separate times: itkGrayscaleMorphologicalOpeningImageFilter, itkGrayscaleMorphologicalClosingImageFilter, itkGrayscaleDilateImageFilter, and itkGrayscaleErodeImageFilter. Can the algorithm type be declared once in a header file? Also, ITK seems to favour enum types (see: itkRegularStepGradientDescentBaseOptimizer), should it be an enum?<br /> </p><p>I also stumbled across a bug / problem with itkSeparableImageFilter.txx: the output is not correctly grafted. The following line needs to be added above the update for the last filter:</p><p>m_Filters[TInputImage::ImageDimension - 1]-&gt;GraftOutput( this-&gt;GetOutput() );&nbsp;</p><p><strong>Applicability to other problems:</strong><br />The work is applicable to a wide of range of image processing problems, not only in the medical domain.<br /> <br /> <strong>Suggestions for future work:</strong></p><ul><li>Addition of the Annulus operator (see attachment) and Cross operator to itkFlatStructuringElement</li><li>The itkSeparableImageFilter and itkMaskedSeparableImageFilter classes were of particular interest to me, but I was disappointed to find no morphological operations utilising these (at least that I could find) and no comparisons of speeds for Box structuring elements of basic, histogram, anchor, and <em>separable </em>approaches. I have implemented separable dilation and erosion using the basic approach (see attachment). A moving histogram approach could also be implemented. Perhaps these classes can be added in the darcs repository / toolkit?</li></ul><p><strong>Overall:</strong><br />A comprehensive article which discusses a number of very useful filters (many of which I have already started using). Thanks!</p><p>&nbsp;</p>",
        "date": "07-18-2007",
        "review_id": 503
      },
      {
        "author": {
          "author_email": "cleary@georgetown.edu",
          "author_firstname": "Kevin",
          "author_id": 368,
          "author_lastname": "Cleary"
        },
        "content": "<span><strong>Summary:<br /></strong></span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">This paper reviews background theory for a number of approaches to kernel based filtering, which are all well established in the literature. They can significantly reduce complexity and execution time. The authors implemented them in ITK and evaluated their performance.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><strong>Hypothesis:<br /></strong>Non Applicable<br /><br /><strong>Evidence:</strong></span><em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"></span></em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">This paper reviews the published approaches and introduces their implementation in ITK. It has no new idea. However, it shows how efficient the implemented algorithms are by presenting the measured execution time with an increasing kernel size.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><br /><strong>Open Science:</strong></span><em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"></span></em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">Yes, they provide the source code and the images through a web site.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">Yes, they provide enough details.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">The code is written as a part of ITK.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><strong>Reproducibility:</strong></span><em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"></span></em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">No</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"> I did not reproduce the work.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><strong>Use of Open Source Software:</strong></span><em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"></span></em><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">Yes, they did. Their code itself is a part of ITK.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">No, they don&rsquo;t describe them.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">Yes, they provide advice. They tell us that availablity of filtering algorithm can make much simpler approaches to many problems practical.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><br /><strong>Open Source Contributions:<br /></strong></span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">Yes, they provide the source code through a web site.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><br /></span><span><strong>Requests for additional information from authors:<br /></strong></span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\">Table captions are a little confusing. More details are necessary.</span><span style=\\\"font-size: 9pt; color: black; font-family: &#39;Verdana&#39;,&#39;sans-serif&#39;\\\"><br /><strong>Additional Comments:</strong></span><span style=\\\"font-size: 10.5pt; font-family: Consolas\\\"></span> <p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font face=\\\"Times New Roman\\\" size=\\\"2\\\">In addition to the answers to the above questions, it might be useful to the reader if a coarse-to-fine review was provided that starts with (a) the overall recommendation of the reviewer to the community (e.g., &quot;Download this!&quot; or &quot;Has great potential, but needs some additional work&quot; or &quot;Work is interesting, but not (yet?) appropriate for the open-source community for the following general reasons...&quot;), (b) General comments on the technology involved, (c) General comments on the contribution (introduction, background, method description, evaluations, followed by (d) Detailed comments on the contribution (grammar, spelling, data formats). </font></p><p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font face=\\\"Times New Roman\\\" size=\\\"2\\\">(a) I recommend to download this to the community.</font></p><p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font face=\\\"Times New Roman\\\" size=\\\"2\\\">(b) None</font></p><p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font face=\\\"Times New Roman\\\" size=\\\"2\\\">(c) The authors implemented the efficient kernel filtering algorithms in ITK. Even though the algorithms are already published and not new, the implementation in ITK may be helpful for other image processing projects.</font></p><p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font face=\\\"Times New Roman\\\" size=\\\"2\\\">(d) Some grammatical mistakes</font></p><p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font size=\\\"2\\\"><font face=\\\"Times New Roman\\\"><span>&nbsp;&nbsp; </span>i) Page 8: The filters discusses in this article </font><span style=\\\"font-family: Wingdings\\\"><span>&agrave;</span></span><font face=\\\"Times New Roman\\\"> The filters discussed in this article</font></font></p><p style=\\\"margin: 0in 0in 0pt; text-indent: 15pt\\\" class=\\\"MsoNormal\\\"><font size=\\\"2\\\"><font face=\\\"Times New Roman\\\">ii) Caption of figure 7 : with and increasing number fo threads </font><span style=\\\"font-family: Wingdings\\\"><span>&agrave;</span></span><font face=\\\"Times New Roman\\\"> with increasing number of threads</font></font></p><p style=\\\"margin: 0in 0in 0pt; text-indent: 15pt\\\" class=\\\"MsoNormal\\\"><font size=\\\"2\\\"><font face=\\\"Times New Roman\\\">iii) Caption of figure 9 : for and increasing </font><span style=\\\"font-family: Wingdings\\\"><span>&agrave;</span></span><font face=\\\"Times New Roman\\\"> for increasing</font></font></p><p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font size=\\\"2\\\"><font face=\\\"Times New Roman\\\"><span>&nbsp;&nbsp; </span>iv) Table 10 : size </font><span style=\\\"font-family: Wingdings\\\"><span>&agrave;</span></span><font face=\\\"Times New Roman\\\"> thread</font></font></p><font face=\\\"Times New Roman\\\" size=\\\"2\\\">&nbsp;</font> <p style=\\\"margin: 0in 0in 0pt\\\" class=\\\"MsoNormal\\\"><font face=\\\"Times New Roman\\\" size=\\\"2\\\">This review was written by Min Cho and submitted by Kevin Cleary.</font></p><font face=\\\"Times New Roman\\\" size=\\\"2\\\">&nbsp;</font>",
        "date": "09-11-2007",
        "review_id": 564
      }
    ],
    "revisions": [
      {
        "article": "bafkreihc7bvdwskm5ipovao7nibyiyj75lhadb5adgr6lyvg757ndaszne",
        "dapp": null,
        "dataset": null,
        "doi": null,
        "handle": "1926/555",
        "source_code": null,
        "source_code_git_ref": null
      }
    ],
    "source_code_git_repo": null,
    "submitted_by_author": {
      "author_email": "richard.beare@ieee.org",
      "author_firstname": "Richard",
      "author_fullname": "Beare, Richard",
      "author_id": 197,
      "author_institution": "Monash University",
      "author_lastname": "Beare"
    },
    "tags": [
      "rank filtering",
      "efficient methods",
      "morphology",
      "linear filtering"
    ],
    "title": "Efficient implementation of kernel filtering"
  }
}