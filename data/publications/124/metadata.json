{
  "publication": {
    "abstract": "Grayscale dilation and erosion are basic transformations of mathematical morphology. Used together\r\nor with other transformations, they are very useful tools for image analysis. However, they can be very\r\ntime consuming, especially with 3D images, and with large structuring elements. Several algorithms\r\nhave been created to decrease the computation time, some of them with some limitations of shape of\r\nstructuring element. We have implemented several algorithms, studied their performance in different\r\nconditions, and shown that all of them are more efficients than the others in certain conditions.\r\n We finally introduce a new structuring element class and a some meta filter designed to select the best\r\nalgorithm depending on the image and the structuring element, and to smoothely integrate the different\r\nalgorithms available in the toolkit.",
    "articles": [
      "bafkreiajyqoy7yhtcrbdhwba5rb5aminx2eue7ihoqnob6cvteb3sqnsqq"
    ],
    "authors": [
      {
        "author_fullname": "Lehmann, Gaetan",
        "author_place": 1,
        "persona_email": "gaetan.lehmann@gmail.com",
        "persona_firstname": "Gaetan",
        "persona_id": 328,
        "persona_lastname": "Lehmann"
      },
      {
        "author_fullname": "Beare, Richard",
        "author_place": 2,
        "persona_email": "richard.beare@ieee.org",
        "persona_firstname": "Richard",
        "persona_id": 197,
        "persona_lastname": "Beare"
      }
    ],
    "categories": [],
    "comments": [],
    "date_submitted": "2006-09-17T18:29:21Z",
    "journals": [
      {
        "journal_id": 3,
        "journal_name": "The Insight Journal"
      }
    ],
    "license": "You are licensing your work to Kitware Inc. under the\nCreative Commons Attribution License Version 3.0.\n\nKitware Inc. agrees to the following:\n\nKitware is free\n * to copy, distribute, display, and perform the work\n * to make derivative works\n * to make commercial use of the work\n\nUnder the following conditions:\n\\\"by Attribution\\\" - Kitware must attribute the work in the manner specified by the author or licensor.\n\n * For any reuse or distribution, they must make clear to others the license terms of this work.\n * Any of these conditions can be waived if they get permission from the copyright holder.\n\nYour fair use and other rights are in no way affected by the above.\n\nThis is a human-readable summary of the Legal Code (the full license) available at\nhttp://creativecommons.org/licenses/by/3.0/legalcode",
    "publication_id": 124,
    "reviews": [
      {
        "author": {
          "author_email": "dan.muel@gmail.com",
          "author_firstname": "Dan",
          "author_id": 286,
          "author_lastname": "Mueller"
        },
        "content": "<b>Summary:</b>\r\nThis paper presents a reworking of ITK\\'s mathematical morphology filters. The work is motivated by a number of factors including convenience, completeness, and performance. As of revision 1, this is a stub article only - the source code contains the developmental versions of all the additional filters, however only the FlatStructuringElement is addressed in the paper. As such, this review focusses on the FlatStructuringElement issues only.\r\n\r\n<b>Open Science:</b>\r\nThis contribution conforms to Open Science by providing all source code, tests, and images.\r\n\r\n<b>Reproducibility:</b>\r\nI compiled the entire project on WinXP SP2, using MSVC8.0, CMake 2.4.2. I encountered a number of compilation issues:\r\n\r\n1. Project testSE: itkFlatStructuringElement.txx: line 512: <b>ambiguous call to pow()</b>. Microsoft Visual Studio 8.0 on WinXP can not resolve the first argument if it is an int - it must be explicitly cast to a double. eg. \\'unsigned int facets = 8 * (int)pow(4, iterations);\\' becomes \\'unsigned int facets = 8 * (int)pow(4.0, iterations);\\'\r\n\r\n2. Project kernelShape: itkFlatStructuringELement.h: line 67: <b>error C2064: term does not evaluate to a function taking 0 arguments</b>. This one is a little beyond my experience: I looked <a href=http://msdn2.microsoft.com/en-us/library/z72c1dfd.aspx>here</a> for some more info, but it didn\\'t really help. To temporarily resolve this issue in order to continue reviewing, I removed the default argument values and changed all the references to FromImage and GetImage to specifically provide the values (not a very good long term solution - the default parameters are nice! If anyone has any suggestions for getting this to work with MSVS8.0 on WinXP I am willing to test it out).\r\n\r\n3. There are <b>lots</b> of warnings: <b>warning C4804 : unsafe use of type bool in operation</b>. (BTW Gaetan, I have also noticed these warnings when compiling WrapITK). This results from using comparison operations on bools (seeing that the itk::Neighborhood has TPixel=bool). These warnings may scare/confuse some users, so it might be wise to add the following pragma statement somewhere: \\' #pragma warning( disable : 4804) \\'. For sake of ease I have added it to ImageToImageFilter.h in my working copy, but this is probably not the best place for it... Probably better is the header file of each morphological filter .. ?\r\n\r\n<b>Use of Open Source Software:</b>\r\nUses ITK.\r\n\r\n<b>Code Quality:</b>\r\nExcellent code quality. I like lots of comments, and itkFlatStructuringElement.txx has plenty! \r\n\r\nJust a few minor issues:\r\n1. While the guts of the code is very well commented, the actual header (which users will look to for useage instructions/documentation) is lacking. I feel you should add/enhance the comments for:\r\nBox: eg. \\\" An easy access method for creating a box (2D) or cube (3D) structuring element. This method supports n-D dimensions. \\\"\r\nBall: eg. \\\" An easy access method for creating a circle (2D) or spherical (3D) structuring element. \\\"\r\nPoly: eg. \\\" An easy access method for creating a polygon structuring element. Note that for 3D structuring elements, only the following number of edges are supported: 12, 14, 20, 32. \\\"\r\nFromImage: eg. \\\" Creates an arbitrary structuring element from the given image. \\\"\r\n\r\n2. It is probably worthwhile to comment the Decomposable property in itkFlatStructuringElement.h (just to let users know they don\\'t need to worry too much about it - eg. \\\" This is an internal property to specify if the current structuring element is decomposable. Decomposable structuring elements can be implemented using more efficient/faster algorithms. \\\"). Also to conform to ITK standards maybe use itkGetConstMacro(Decomposable, bool);\r\n\r\n3. (This is a bit of a personal preference but) I like to see any papers which the class implements or was influenced by in the class documentation in the header (ie. include the reference to \\\"Radial Decomposition of Discs and Spheres\\\" - CVGIP: Graphical Models and Image Processing in the header).\r\n\r\n<b>Applicability to other problems:</b>\r\nMathematical morphology has wide application and the enhancements proposed in this article make using morphological filters in ITK more convenient and computationally more efficient.\r\n\r\n<b>Requests for additional information from authors:</b>\r\nIs there a reason that you defined M_PI in itkFlatStructuringElement.txx and didn\\'t use the Utilities/vxl/core/vnl/vnl_math.h version (vnl_math::pi) ? \r\n\r\n<b>Additional Comments:</b>\r\nBTW: I like the images/StrelFromImage.png picture!\r\n\r\n",
        "date": "09-17-2006",
        "review_id": 389
      }
    ],
    "revisions": [
      {
        "article": "bafkreiajyqoy7yhtcrbdhwba5rb5aminx2eue7ihoqnob6cvteb3sqnsqq",
        "citation_list": [
          {
            "key": "ref1",
            "score": 25.994148,
            "unstructured": "The ITK Software Guide+2003+L. Ibanez+W. Schroeder"
          },
          {
            "key": "ref2",
            "score": 17.668575,
            "unstructured": "Kitware"
          }
        ],
        "dapp": null,
        "dataset": null,
        "doi": null,
        "handle": "1926/308",
        "source_code": "bafybeig3nluis4bwho6pest256dqukr56l44xt62nb6ykhpxkl67ce3zfy",
        "source_code_git_ref": null
      }
    ],
    "source_code_git_repo": null,
    "submitted_by_author": {
      "author_email": "gaetan.lehmann@gmail.com",
      "author_firstname": "Gaetan",
      "author_fullname": "Lehmann, Gaetan",
      "author_id": 328,
      "author_institution": "INRA",
      "author_lastname": "Lehmann"
    },
    "tags": [
      "mathematical mophology",
      "structuring element"
    ],
    "title": "Consolidated morphology"
  }
}